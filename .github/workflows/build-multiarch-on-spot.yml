name: Build multi-arch image using AWS spot instances

on: [workflow_dispatch]

concurrency:
  cancel-in-progress: false
  group: run-on-spot

jobs:
  get-image-tag:
    name: Get image tag
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master
      - name: setup variables
        id: vars
        run: |
          echo "::set-output name=date::$(date +'%y.%m.%d%H%m')"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    outputs:
      image_tag: ${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.sha_short }}

  spawn-spots:
    name: Spawn spot machines
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_docker_login: ${{ secrets.DOCKERHUB_USERNAME }}
      TF_VAR_docker_password: ${{ secrets.DOCKERHUB_TOKEN }}
    outputs:
      PUBLIC_IPS: ${{ env.PUBLIC_IPS }}
      PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@master
      -
        name: "Terraform: Setup"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.5
          terraform_wrapper: false
      -
        name: "Terraform: Init"
        run: terraform -chdir=terraform init
      -
        name: "Terraform: Apply"
        run: terraform -chdir=terraform apply -auto-approve
      -
        name: "Save Terraform State File"
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: terraform-state
          path: terraform/terraform.tfstate
          retention-days: 1
      -
        id: outputs
        name: "Terraform: Parse Outputs"
        run: |
          PRIVATE_KEY=$(terraform -chdir=terraform output private_key)
          PUBLIC_IPS=$(terraform -chdir=terraform output --json public_ips)

          echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          echo "$PRIVATE_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "PUBLIC_IPS<<EOF" >> $GITHUB_ENV
          echo "$PUBLIC_IPS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  build:
    name: Build and push image (${{ matrix.PUBLIC_IP }}) # @todo Show arch in job name
    runs-on: ubuntu-latest
    needs:
      - spawn-spots
      - get-image-tag
    strategy:
      matrix:
        PUBLIC_IP: ${{ fromJSON(needs.spawn-spots.outputs.PUBLIC_IPS) }}
    env:
      PUBLIC_IP: ${{ matrix.PUBLIC_IP }}
      REPOSITORY_URL: https://github.com/${{ github.repository }}.git
      CHECKOUT: ${{ github.sha }}
      DOCKERHUB_IMAGE: ${{ secrets.DOCKERHUB_IMAGE }}
      IMAGE_TAG: ${{ needs.get-image-tag.outputs.image_tag }}
    steps:
      -
        name: Setup SSH client
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          cat >>~/.ssh/config <<END
          Host spot
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/private.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.PUBLIC_IP }}
          PRIVATE_KEY: ${{ needs.spawn-spots.outputs.PRIVATE_KEY }}
      -
        name: Checkout on spot instance
        run: ssh spot "mkdir ~/code && git clone \"$REPOSITORY_URL\" ~/code && cd ~/code && git checkout \"$CHECKOUT\""
      -
        name: Build docker image on spot instance
        run: ssh spot "sudo docker build -t \"$DOCKERHUB_IMAGE:$IMAGE_TAG-"'$(arch)'"\" ~/code"
      -
        name: Push docker image from spot instance
        run: ssh spot "sudo docker push \"$DOCKERHUB_IMAGE:$IMAGE_TAG-"'$(arch)'"\""

  manifest:
    name: Create and push multiarch manifest
    runs-on: ubuntu-latest
    needs:
      - spawn-spots
      - build
      - get-image-tag
    env:
      PUBLIC_IP: ${{ fromJSON(needs.spawn-spots.outputs.PUBLIC_IPS)[0] }}
      REPOSITORY_URL: https://github.com/${{ github.repository }}.git
      CHECKOUT: ${{ github.sha }}
      DOCKERHUB_IMAGE: ${{ secrets.DOCKERHUB_IMAGE }}
      IMAGE_TAG: ${{ needs.get-image-tag.outputs.image_tag }}
    steps:
      -
        name: Setup SSH client
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          cat >>~/.ssh/config <<END
          Host spot
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/private.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.PUBLIC_IP }}
          PRIVATE_KEY: ${{ needs.spawn-spots.outputs.PRIVATE_KEY }}
      -
        name: Create multiarch docker manifest
        # @todo Take x86_64 and aarch64 as variables from previous steps
        run: ssh spot "sudo docker manifest create \"$DOCKERHUB_IMAGE:$IMAGE_TAG\" --amend \"$DOCKERHUB_IMAGE:$IMAGE_TAG-x86_64\" --amend \"$DOCKERHUB_IMAGE:$IMAGE_TAG-aarch64\""
      -
        name: Push docker manifest
        run: ssh spot "sudo docker manifest push \"$DOCKERHUB_IMAGE:$IMAGE_TAG\""

  destroy-spots:
    name: Destroy spot machines
    runs-on: ubuntu-latest
    needs:
      - spawn-spots
      - build
      - manifest
    if: ${{ always() }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_docker_login: ${{ secrets.DOCKERHUB_USERNAME }}
      TF_VAR_docker_password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@master
      -
        name: "Download Terraform State File"
        uses: actions/download-artifact@v2
        with:
          name: terraform-state
          path: terraform
      -
        name: "Terraform: Setup"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.5
          terraform_wrapper: false
      -
        name: "Terraform: Init"
        run: terraform -chdir=terraform init
      -
        name: "Terraform: Destroy"
        run: terraform -chdir=terraform destroy -auto-approve
